#########################################
###### Z BELTS TENSION CALIBRATION ######
#########################################
# Written by Frix_x#0161 #
# @version: 1.0

# CHANGELOG:
#   v1.0: first Z belts tension calibration macro

# -------------------------------------------------------------------------------------------------------------------------
# If you want to use it into your own config, please install it as a standalone macro as described in the
# installation section of this file: doc > features > z_belts_measurements.md
# -------------------------------------------------------------------------------------------------------------------------

### What is it ? ###
# This macro helps you to check that all the Z belts are all having the same tension and the same behavior on a multiple
# Z belted machine such as the Voron v2.4 and TriZero for example.

# It works by moving the toolhead at each corner of the QGL (or Z_TILT). Then it vibrate the head at different frequency to measure
# and find the main resonnance of the belt. Then all measurements are drawed on the same graph to be able to compare them.

# The goal is to make it easy to set, share and use it.

# This macro is parametric and most of the values can be adjusted with their respective input parameters.
# It can be called without any parameters - in which case the default values would be used - or with any combination of parameters as desired.

# Usage:
#   1. Call the ZBELTS_SHAPER_CALIBRATION macro, wait for it to end and compute the graphs.
#      Be carefull about the Z_HEIGHT variable that default to 30mm -> if your ADXL is under the nozzle, increase it to avoid a crash of the ADXL on the bed of the machine.
#   3. Then look at it in the results folder.


[gcode_macro ZBELTS_SHAPER_CALIBRATION]
gcode:
    #
    # PARAMETERS
    #
    {% set z_height = params.Z_HEIGHT|default(50)|int %} # z height to put the toolhead before starting the movements
    {% set verbose = params.VERBOSE|default(true) %} # Wether to log the current speed in the console
    {% set accel_chip = params.ACCEL_CHIP|default("adxl345") %} # ADXL chip name in the config

    {% set freq_start = params.FREQ_START|default(5)|int %} # minimum frequency for the movements
    {% set freq_end = params.FREQ_END|default(130)|int %} # maximum frequency for the movements
    {% set accel_per_hz = params.ACCEL_PER_HZ|default(100)|int %} # acceleration to use to test a specific frequency: accel = accel_per_hz * freq
    {% set hz_per_sec = params.HZ_PER_SEC|default(1)|int * 10 %} # during the test, each second the frequency increases by hz_per_sec
    
    {% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %} # travel feedrate between moves

    {% if printer.quad_gantry_level %}
        {% set points = printer.configfile.settings.quad_gantry_level.points %}
    {% elif printer.z_tilt %}
        {% set points = printer.configfile.settings.z_tilt.points %}
    {% endif %}

    #
    # STARTING...
    #
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home printer first!") }
    {% endif %}

    {action_respond_info("")}
    {action_respond_info("Starting Z belts calibration")}
    {action_respond_info("This operation can not be interrupted by normal means. Hit the \"emergency stop\" button to stop it if needed")}
    {action_respond_info("")}

    SAVE_GCODE_STATE NAME=STATE_ZBELTS_CALIBRATION

    G90
    G1 Z{z_height} F{feedrate_travel}

    {% for point in points %}
        G90
        G1 X{point[0]} Y{point[1]} F{feedrate_travel}
        {% if verbose %}
            RESPOND MSG="Z belts calibration point: {point[0]}, {point[1]}"
            RESPOND MSG="Testing frequencies from {freq_start}Hz to {freq_end}Hz"
        {% endif %}
        
        ACCELEROMETER_MEASURE CHIP={accel_chip}

        # Let the Z belt and motor go brrrrr
        {% set zmotor = "" if loop.index0 == 0 else loop.index0 %}
        {% set curr_freq = namespace(value = freq_start) %}

        {% for iteration in range(1, 1000) %}
            {% if curr_freq.value <= freq_end %}

                {% set t_seg = 0.25 / curr_freq.value %}
                {% set accel = accel_per_hz * curr_freq.value %}
                {% set max_v = accel * t_seg %}
                {% set L = 0.5 * accel * t_seg**2 %}

                # RESPOND MSG="Current freq: {curr_freq.value}Hz"
                # RESPOND MSG="F_M STEPPER=stepper_z{zmotor} DISTANCE={loop.cycle(1.0, -1.0) * L} VELOCITY={max_v} ACCEL={accel}"
                # RESPOND MSG="F_M STEPPER=stepper_z{zmotor} DISTANCE={loop.cycle(-1.0, 1.0) * L} VELOCITY={max_v} ACCEL={accel}"

                FORCE_MOVE STEPPER=stepper_z{zmotor} DISTANCE={loop.cycle(1.0, -1.0) * L} VELOCITY={max_v} ACCEL={accel}
                FORCE_MOVE STEPPER=stepper_z{zmotor} DISTANCE={loop.cycle(-1.0, 1.0) * L} VELOCITY={max_v} ACCEL={accel}
                
                {% set old_freq = curr_freq.value %}
                {% set curr_freq.value = curr_freq.value + (2 * t_seg * hz_per_sec) %}
                
            {% endif %}
        {% endfor %}
        
        ACCELEROMETER_MEASURE CHIP={accel_chip} NAME=zbelt_stepper_z{zmotor}
    
    {% endfor %}

    # {% if verbose %}
    #     RESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."
    # {% endif %}
    # RUN_SHELL_COMMAND CMD=plot_graph PARAMS="ZBELTS_CALIB"

    RESTORE_GCODE_STATE NAME=STATE_ZBELTS_CALIBRATION

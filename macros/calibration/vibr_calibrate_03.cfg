#########################################
###### Z BELTS TENSION CALIBRATION ######
#########################################
# Written by Frix_x#0161 #
# @version: 1.0

# CHANGELOG:
#   v1.0: first Z belts tension calibration macro

# -------------------------------------------------------------------------------------------------------------------------
# If you want to use it into your own config, please install it as a standalone macro as described in the
# installation section of this file: doc > features > z_belts_measurements.md
# -------------------------------------------------------------------------------------------------------------------------

### What is it ? ###
# This macro helps you to check that all the Z belts are all having the same tension and the same behavior on a multiple
# Z belted machine such as the Voron v2.4 and TriZero for example.

# It works by moving the toolhead at each corner of the QGL (or Z_TILT). Then it vibrate the head at different frequency to measure
# and find the main resonnance of the belt. Then all measurements are drawed on the same graph to be able to compare them.

# The goal is to make it easy to set, share and use it.

# This macro is parametric and most of the values can be adjusted with their respective input parameters.
# It can be called without any parameters - in which case the default values would be used - or with any combination of parameters as desired.

# Usage:
#   1. Call the ZBELTS_SHAPER_CALIBRATION macro, wait for it to end and compute the graphs.
#      Be carefull about the Z_HEIGHT variable that default to 30mm -> if your ADXL is under the nozzle, increase it to avoid a crash of the ADXL on the bed of the machine.
#   3. Then look at it in the results folder.


[gcode_macro ZBELTS_SHAPER_CALIBRATION]
gcode:
    #
    # PARAMETERS
    #
    {% set z_height = params.Z_HEIGHT|default(30)|int %} # z height to put the toolhead before starting the movements
    {% set verbose = params.VERBOSE|default(true) %} # Wether to log the current speed in the console
    {% set accel_chip = params.ACCEL_CHIP|default("adxl345") %} # ADXL chip name in the config

    {% set freq_start = params.FREQ_START|default(5)|int %} # minimum frequency for the movements
    {% set freq_end = params.FREQ_END|default(20)|int %} # maximum frequency for the movements
    {% set accel_per_hz = params.ACCEL_PER_HZ|default(25)|int %} # acceleration to use to test a specific frequency: accel = accel_per_hz * freq
    {% set hz_per_sec = params.HZ_PER_SEC|default(1)|int %} # during the test, each second the frequency increases by hz_per_sec
    
    {% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %} # travel feedrate between moves


    {% if printer.quad_gantry_level %}
        {% set points = printer.configfile.settings.quad_gantry_level.points %}
    {% elif printer.z_tilt %}
        {% set points = printer.configfile.settings.z_tilt.points %}
    {% endif %}

    #
    # STARTING...
    #
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home printer first!") }
    {% endif %}

    {action_respond_info("")}
    {action_respond_info("Starting Z belts calibration")}
    {action_respond_info("This operation can not be interrupted by normal means. Hit the \"emergency stop\" button to stop it if needed")}
    {action_respond_info("")}

    SAVE_GCODE_STATE NAME=STATE_ZBELTS_CALIBRATION

    G90
    G1 Z{z_height} F{feedrate_travel}

    {% for point in points %}
        G90
        G1 X{pointX} Y{pointY} F{feedrate_travel}
        RESPOND MSG="Z belts calibration point: {point[0]}, {point[1]}"
        {% set curr_freq = freq_start %}

        # vibration pattern
        G91
        # {% while curr_freq <= freq_end %}
        #     {% if verbose %}
        #         RESPOND MSG="Testing frequency {curr_freq} Hz"
        #     {% endif %}

        #     {% set t_seg = 0.25 / curr_freq %}
        #     {% set accel = accel_per_hz * curr_freq %}
        #     {% set max_v = accel * t_seg %}
            
        #     {% set L = 0.5 * accel * t_seg**2 %}
        #     G1 Z{loop.cycle(1.0, -1.0) * L} F{max_v}
        #     G1 Z{loop.cycle(-1.0, 1.0) * L} F{max_v}
            
        #     {% set old_freq = curr_freq %}
        #     {% set curr_freq = curr_freq + (2 * t_seg * hz_per_sec) %}


            # ACCELEROMETER_MEASURE CHIP={accel_chip}
            # {% for key, factor in direction_factor[direction].move_factors|dictsort %}
            #     G1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}
            # {% endfor %}
            # ACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{(curr_speed / 60)|int}n1
        # {% endwhile %}
    {% endfor %}

    

    # {% if verbose %}
    #     RESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."
    # {% endif %}
    # RUN_SHELL_COMMAND CMD=plot_graph PARAMS="VIBRATIONS {direction}"

    RESTORE_GCODE_STATE NAME=STATE_ZBELTS_CALIBRATION
